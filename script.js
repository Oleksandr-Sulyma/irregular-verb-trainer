import { verbs, GROUP_DESCRIPTIONS } from "./js/array-words.js";
// ===== –ì–õ–û–ë–ê–õ–¨–ù–ò–ô –°–¢–ê–ù =====
let correctAnswers = 0,
  allSentences = [],
  currentGroupData = [],
  currentTaskIndex = 0,
  currentMode = "home",
  currentGroupIndex = null;
const content = document.getElementById("content"),
  backBtn = document.getElementById("backBtn"),
  mainTitle = document.getElementById("mainTitle");

// ===== –î–ê–ù–Ü =====

// ===== –û–ó–í–£–ß–ï–ù–ù–Ø =====
let availableVoices = [];
let selectedVoice = null;

// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –≥–æ–ª–æ—Å–∏
function loadVoices() {
  availableVoices = speechSynthesis.getVoices();
  if (availableVoices.length > 0 && !selectedVoice) {
    selectedVoice =
      availableVoices.find((v) => v.lang === "en-US") || availableVoices[0];
  }
}

// –ü—ñ–¥–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≥–æ–ª–æ—Å—ñ–≤ —É Safari / –º–æ–±—ñ–ª—å–Ω–∏—Ö
speechSynthesis.onvoiceschanged = loadVoices;
loadVoices();

// –ì–û–õ–û–í–ù–ê –§–£–ù–ö–¶–Ü–Ø –û–ó–í–£–ß–ï–ù–ù–Ø
function speak(text) {
  if (!selectedVoice) loadVoices();
  const u = new SpeechSynthesisUtterance(text);
  u.lang = selectedVoice?.lang || "en-US";
  u.voice = selectedVoice || null;
  u.rate = 0.9;
  u.pitch = 1;
  window.speechSynthesis.cancel();
  window.speechSynthesis.speak(u);
}

// üîä –†–æ–∑–±–ª–æ–∫—É–≤–∞–Ω–Ω—è –æ–∑–≤—É—á–µ–Ω–Ω—è –Ω–∞ –º–æ–±—ñ–ª—å–Ω–∏—Ö
function unlockTTS() {
  try {
    const u = new SpeechSynthesisUtterance(" ");
    u.volume = 0;
    speechSynthesis.speak(u);
    document.removeEventListener("click", unlockTTS);
    document.removeEventListener("touchstart", unlockTTS);
  } catch (e) {}
}

document.addEventListener("click", unlockTTS);
document.addEventListener("touchstart", unlockTTS);

// üîΩ –°–µ–ª–µ–∫—Ç–æ—Ä –≥–æ–ª–æ—Å—ñ–≤ —ñ–∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –ø—Ä–æ—Å–ª—É—Ö–∞—Ç–∏
function populateVoiceSelector() {
  const container = document.createElement("div");
  container.id = "voiceSelectorContainer";
  container.className = "mb-4 text-center flex flex-col items-center";

  const label = document.createElement("label");
  label.textContent = "üéô –û–±–µ—Ä—ñ—Ç—å –≥–æ–ª–æ—Å:";
  label.className = "block text-sm text-gray-600 mb-1";
  container.appendChild(label);

  const row = document.createElement("div");
  row.className = "flex items-center gap-2";

  const select = document.createElement("select");
  select.className = "border rounded p-2 text-sm max-w-xs";
  select.id = "voiceSelect";

  availableVoices.forEach((v, i) => {
    const opt = document.createElement("option");
    opt.value = i;
    opt.textContent = `${v.name} (${v.lang})`;
    select.appendChild(opt);
  });

  select.onchange = () => {
    selectedVoice = availableVoices[select.value];
  };

  // –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ—Å–ª—É—Ö–∞—Ç–∏ –≥–æ–ª–æ—Å"
  const previewBtn = document.createElement("button");
  previewBtn.textContent = "üéß –ü—Ä–æ—Å–ª—É—Ö–∞—Ç–∏";
  // –î–û–î–ê–Ñ–ú–û ID –î–õ–Ø –î–ò–ù–ê–ú–Ü–ß–ù–û–ì–û –ü–†–ò–ö–†–Ü–ü–õ–ï–ù–ù–Ø –û–ë–†–û–ë–ù–ò–ö–ê –ü–û–î–Ü–ô
  previewBtn.id = "previewVoiceBtn";
  previewBtn.className =
    "py-2 px-4 bg-indigo-600 text-white text-sm rounded-lg hover:bg-indigo-700 transition";

  // üõë –í–ò–î–ê–õ–ï–ù–û: previewBtn.onclick = () => { ... }
  // –¶–µ –±—É–ª–æ –¥–∂–µ—Ä–µ–ª–æ–º ReferenceError, –æ—Å–∫—ñ–ª—å–∫–∏ —Ñ—É–Ω–∫—Ü—ñ—è –Ω–µ –±—É–ª–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ—é.

  row.appendChild(select);
  row.appendChild(previewBtn);
  container.appendChild(row);

  const app = document.getElementById("app");
  app.prepend(container);

  // üõë –í–ò–ö–õ–ò–ö–ê–Ñ–ú–û –§–£–ù–ö–¶–Ü–Æ –î–õ–Ø –î–ò–ù–ê–ú–Ü–ß–ù–û–ì–û –ü–†–ò–ö–†–Ü–ü–õ–ï–ù–ù–Ø
  attachPreviewListener();
}

// ===== –ü–†–ò–í'–Ø–ó–ö–ê –°–õ–£–•–ê–ß–ê –î–õ–Ø –ö–ù–û–ü–ö–ò –ü–†–û–°–õ–£–•–û–í–£–í–ê–ù–ù–Ø =====
function attachPreviewListener() {
  const previewBtn = document.getElementById("previewVoiceBtn");
  const select = document.getElementById("voiceSelect");

  if (previewBtn && select) {
    previewBtn.addEventListener("click", () => {
      const voice = availableVoices[select.value];
      if (voice) {
        const sample = new SpeechSynthesisUtterance("Hello! This is my voice.");
        sample.voice = voice;
        sample.lang = voice.lang;
        speechSynthesis.cancel();
        speechSynthesis.speak(sample);
      }
    });
  }
}

// –≤–∏–¥–∞–ª–µ–Ω–Ω—è –±–ª–æ–∫—É –≤–∏–±–æ—Ä—É –≥–æ–ª–æ—Å—É
function removeVoiceSelector() {
  const selectorElement = document.getElementById("voiceSelectorContainer");

  if (selectorElement) {
    // –í–∏–∫–ª–∏–∫–∞—î–º–æ –º–µ—Ç–æ–¥ .remove() –±–µ–∑–ø–æ—Å–µ—Ä–µ–¥–Ω—å–æ –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç—ñ
    selectorElement.remove();
  }
}

// –ö–æ–ª–∏ –≥–æ–ª–æ—Å–∏ –¥–æ—Å—Ç—É–ø–Ω—ñ ‚Äî —Å—Ç–≤–æ—Ä—é—î–º–æ —Å–µ–ª–µ–∫—Ç–æ—Ä
// speechSynthesis.onvoiceschanged = () => {
//   loadVoices();
//   populateVoiceSelector();
// };

// ===== –ö–ù–û–ü–ö–ê –ù–ê–ó–ê–î =====
function updateBackButton(text, visible) {
  backBtn.textContent = text;
  backBtn.classList.toggle("hidden", !visible);
}
function handleBack() {
  if (["study", "drill", "test"].includes(currentMode))
    selectGroup(currentGroupIndex);
  else if (currentMode === "selectGroup") renderHome();
}

// ===== –ì–û–õ–û–í–ù–ò–ô –ï–ö–†–ê–ù =====
function renderHome() {
  currentMode = "home";
  updateBackButton("", false);
  mainTitle.textContent = "–í–∏–±–µ—Ä—ñ—Ç—å –±–ª–æ–∫ –¥–ª—è –≤–∏–≤—á–µ–Ω–Ω—è";

  populateVoiceSelector();

  let html = "";
  for (let i = 1; i <= 14; i++) {
    const count = verbs.filter((v) => v.group === i).length;

    // –û—Ç—Ä–∏–º—É—î–º–æ –ø–æ–≤–Ω–∏–π –æ–ø–∏—Å –≥—Ä—É–ø–∏. –ú–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ i - 1, –æ—Å–∫—ñ–ª—å–∫–∏ –º–∞—Å–∏–≤ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ 0.
    const groupDescription = GROUP_DESCRIPTIONS[i - 1];

    html += `
          <div data-group="${i}" class="block-selector p-4 bg-indigo-50 border border-indigo-200 rounded-lg shadow-md cursor-pointer hover:bg-indigo-100 transition text-center">
            <h3 class="text-base md:text-lg font-semibold text-indigo-700">${groupDescription}</h3> 
            <p class="text-sm text-gray-600">${count} –¥—ñ—î—Å–ª—ñ–≤</p>
          </div>`;
  }
  content.innerHTML = `<div class="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-4 gap-3">${html}</div>`;

  // –ü—Ä–∏–≤'—è–∑—É—î–º–æ —Å–ª—É—Ö–∞—á—ñ–≤ –¥–æ —â–æ–π–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫ –≥—Ä—É–ø
  attachGroupSelectionListeners();
}

function attachGroupSelectionListeners() {
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏ –∑ –∫–ª–∞—Å–æ–º 'block-selector'
  const groupButtons = document.querySelectorAll(".block-selector");

  groupButtons.forEach((button) => {
    // –û—Ç—Ä–∏–º—É—î–º–æ ID –≥—Ä—É–ø–∏ –∑ –∞—Ç—Ä–∏–±—É—Ç–∞ data-group
    const groupId = parseInt(button.dataset.group);

    button.addEventListener("click", () => {
      // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é selectGroup –∑ –∫–æ—Ä–µ–∫—Ç–Ω–æ—ó –æ–±–ª–∞—Å—Ç—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ –º–æ–¥—É–ª—è
      selectGroup(groupId);
    });
  });
}

// ===== –í–ò–ë–Ü–† –ì–†–£–ü–ò =====
function selectGroup(groupId) {
  // –ú–∞—Å–∏–≤ GROUP_DESCRIPTIONS –º–∞—î –±—É—Ç–∏ –≤–∏–∑–Ω–∞—á–µ–Ω–∏–π –≥–ª–æ–±–∞–ª—å–Ω–æ, —è–∫ –º–∏ –¥–æ–º–æ–≤–∏–ª–∏—Å—è
  // const GROUP_DESCRIPTIONS = [...]

  // 1. –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ–≤–Ω–∏–π –æ–ø–∏—Å –≥—Ä—É–ø–∏
  const groupDescription = GROUP_DESCRIPTIONS[groupId - 1];

  removeVoiceSelector();
  currentGroupIndex = groupId;
  currentGroupData = verbs.filter((v) => v.group === groupId);
  currentMode = "selectGroup";
  updateBackButton("‚Üê –ù–∞ –≥–æ–ª–æ–≤–Ω—É", true);

  // 2. –û–ù–û–í–õ–Æ–Ñ–ú–û –ó–ê–ì–û–õ–û–í–û–ö –ù–ê –ü–û–í–ù–ò–ô –û–ü–ò–°
  mainTitle.textContent = groupDescription;

  content.innerHTML = `
      <div class="space-y-3">
        <button id="studyBtn" class="w-full py-3 bg-emerald-500 text-white font-semibold rounded-lg">1Ô∏è‚É£ –í–∏–≤—á–µ–Ω–Ω—è</button>
        <button id="drillBtn" class="w-full py-3 bg-yellow-500 text-white font-semibold rounded-lg">2Ô∏è‚É£ –ó–∞—É—á—É–≤–∞–Ω–Ω—è</button>
        <button id="testBtn" class="w-full py-3 bg-indigo-600 text-white font-semibold rounded-lg">3Ô∏è‚É£ –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è</button>
      </div>`;

  // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é –¥–ª—è –ø—Ä–∏–≤'—è–∑–∫–∏ –æ–±—Ä–æ–±–Ω–∏–∫—ñ–≤
  attachModeListeners();
}
// ===== –ü–†–ò–í'–Ø–ó–ö–ê –°–õ–£–•–ê–ß–Ü–í –î–õ–Ø –ö–ù–û–ü–û–ö –†–ï–ñ–ò–ú–Ü–í =====
function attachModeListeners() {
  const studyBtn = document.getElementById("studyBtn");
  const drillBtn = document.getElementById("drillBtn");
  const testBtn = document.getElementById("testBtn");

  studyBtn.addEventListener("click", renderStudyMode);
  drillBtn.addEventListener("click", renderDrillMode);
  testBtn.addEventListener("click", renderTestMode);
}

// ===== –í–ò–í–ß–ï–ù–ù–Ø =====
function renderStudyMode() {
  currentMode = "study";
  updateBackButton("‚Üê –î–æ –º–µ–Ω—é", true);
  mainTitle.textContent = `–í–∏–≤—á–µ–Ω–Ω—è –±–ª–æ–∫—É ${currentGroupIndex}`;

  const rows = currentGroupData
    .map((v) => {
      // –°—Ç–≤–æ—Ä—é—î–º–æ —Ä—è–¥–æ–∫ —Å–ª—ñ–≤ –¥–ª—è –æ–∑–≤—É—á–µ–Ω–Ω—è
      const textToSpeak = `${v.base}, ${v.past}, ${v.participle}`;

      return `
                    <tr class="border-b hover:bg-gray-50">
                        <td>${v.translation}</td><td>${v.base}</td><td>${v.past}</td><td>${v.participle}</td>
                        
                        <td>
                            <button class="speak-btn text-indigo-600 text-xl" data-text="${textToSpeak}">üîä</button>
                        </td>
                    </tr>
                `;
    })
    .join("");

  content.innerHTML = `<div class="overflow-x-auto"><table class="text-sm md:text-base border rounded-lg"><thead class="bg-indigo-100"><tr><th>–ü–µ—Ä–µ–∫–ª–∞–¥</th><th>V1</th><th>V2</th><th>V3</th><th>–û–∑–≤—É—á–µ–Ω–Ω—è</th></tr></thead><tbody>${rows}</tbody></table></div>`;

  // –î–û–î–ê–Ñ–ú–û –í–ò–ö–õ–ò–ö –§–£–ù–ö–¶–Ü–á –î–õ–Ø –ü–†–ò–í'–Ø–ó–ö–ò –°–õ–£–•–ê–ß–Ü–í
  attachSpeakerListeners();
}

// ===== –ü–†–ò–í'–Ø–ó–ö–ê –°–õ–£–•–ê–ß–Ü–í –î–õ–Ø –û–ó–í–£–ß–ï–ù–ù–Ø (–ù–û–í–ê) =====
function attachSpeakerListeners() {
  // –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ –∫–Ω–æ–ø–∫–∏ –∑ –∫–ª–∞—Å–æ–º 'speak-btn'
  const speakerButtons = document.querySelectorAll(".speak-btn");

  speakerButtons.forEach((button) => {
    // –û—Ç—Ä–∏–º—É—î–º–æ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–∑–≤—É—á–µ–Ω–Ω—è –∑ –∞—Ç—Ä–∏–±—É—Ç–∞ data-text
    const text = button.dataset.text;

    button.addEventListener("click", () => {
      // –í–∏–∫–ª–∏–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é speak() –∑ –æ–±–ª–∞—Å—Ç—ñ –≤–∏–¥–∏–º–æ—Å—Ç—ñ –º–æ–¥—É–ª—è
      speak(text);
    });
  });
}

// ===== –î–†–ò–õ =====
function renderDrillMode() {
  currentMode = "drill";
  updateBackButton("‚Üê –î–æ –º–µ–Ω—é", true);
  mainTitle.textContent = `–ó–∞—É—á—É–≤–∞–Ω–Ω—è ${currentGroupIndex}`;
  currentTaskIndex = 0;
  currentGroupData.sort(() => Math.random() - 0.5);
  nextDrillTask();
}
function nextDrillTask() {
  if (currentTaskIndex >= currentGroupData.length)
    return (content.innerHTML = `<div class="p-6 text-center text-green-700 font-bold text-lg">‚úÖ –£—Å—ñ —Å–ª–æ–≤–∞ –ø—Ä–æ–π–¥–µ–Ω–æ!</div>`);

  const v = currentGroupData[currentTaskIndex];

  content.innerHTML = `
  <div class="text-center">
    <p class="text-xl md:text-2xl font-bold text-yellow-700 mb-2">${v.translation}</p>
    <input id="b" class="border p-3 rounded w-full max-w-xs mb-2 text-center" placeholder="V1">
    <input id="p" class="border p-3 rounded w-full max-w-xs mb-2 text-center" placeholder="V2">
    <input id="pp" class="border p-3 rounded w-full max-w-xs mb-3 text-center" placeholder="V3">
    <div id="feed" class="mt-2 text-lg"></div>
    <button id="chk" class="w-full md:w-auto py-3 px-6 bg-yellow-500 text-white font-semibold rounded-lg">–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏</button>
  </div>`;

  const chk = document.getElementById("chk");
  chk.onclick = () => {
    const b = bEl("b"),
      p = bEl("p"),
      pp = bEl("pp");
    const f = document.getElementById("feed"); // ‚Üê –æ—Å—å —Ç—É—Ç –∑–º—ñ–Ω–∞

    if (b === v.base && p === v.past && pp === v.participle) {
      f.innerHTML = "‚úÖ –í—ñ—Ä–Ω–æ!";
      f.className = "text-green-600";
    } else {
      f.innerHTML = `‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω–æ: ${v.base} - ${v.past} - ${v.participle}`;
      f.className = "text-red-600";
    }

    chk.textContent = "–ù–∞—Å—Ç—É–ø–Ω–µ —Å–ª–æ–≤–æ ‚Üí";
    chk.onclick = () => {
      currentTaskIndex++;
      nextDrillTask();
    };
  };
}
function bEl(id) {
  return document.getElementById(id).value.trim().toLowerCase();
}

// ===== –¢–ï–°–¢ =====
function renderTestMode() {
  currentMode = "test";
  updateBackButton("‚Üê –î–æ –º–µ–Ω—é", true);
  mainTitle.textContent = `–¢–µ—Å—Ç ${currentGroupIndex}`;
  initTest();
  nextTest();
}
function initTest() {
  allSentences = [];
  let i = 0;
  currentGroupData.forEach((v) => {
    allSentences.push({ ...v.exampleSentences[i], verbObject: v });
    i = (i + 1) % v.exampleSentences.length;
  });
  for (let i = allSentences.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [allSentences[i], allSentences[j]] = [allSentences[j], allSentences[i]];
  }
  currentTaskIndex = 0;
  correctAnswers = 0;
}
function nextTest() {
  if (currentTaskIndex >= allSentences.length)
    return (content.innerHTML = `<div class="p-6 text-center text-lg md:text-xl text-green-600 font-bold">‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ! ${correctAnswers}/${allSentences.length}</div>`);
  const t = allSentences[currentTaskIndex];
  content.innerHTML = `
  <div class="text-center">
    <p class="italic text-gray-700 mb-2">${t.uk}</p>
    <p class="font-mono text-lg mb-4">${t.en}</p>
    <input id="ans" class="border p-3 rounded w-full max-w-xs mb-2 text-center" placeholder="–í–≤–µ–¥—ñ—Ç—å —Å–ª–æ–≤–æ">
    <div id="fb" class="mt-2 text-lg"></div>
    <button id="chk" class="w-full md:w-auto py-3 px-6 bg-emerald-500 text-white rounded-lg">–ü–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏</button>
  </div>`;
  const ans = document.getElementById("ans"),
    chk = document.getElementById("chk"),
    fb = document.getElementById("fb");
  chk.onclick = () => {
    const a = ans.value.trim().toLowerCase(),
      corr = t.missingWord.toLowerCase();
    if (a === corr) {
      fb.textContent = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!";
      fb.className = "text-green-600";
      correctAnswers++;
    } else {
      fb.textContent = `‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. ${corr}`;
      fb.className = "text-red-600";
    }
    chk.textContent = "–ù–∞—Å—Ç—É–ø–Ω–µ —Ä–µ—á–µ–Ω–Ω—è ‚Üí";
    chk.onclick = () => {
      currentTaskIndex++;
      nextTest();
    };
  };
}

// ===== –°–¢–ê–†–¢ =====
backBtn.onclick = handleBack;
window.onload = renderHome;
